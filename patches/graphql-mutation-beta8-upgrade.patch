Index: web/modules/contrib/graphql_mutation/src/Plugin/GraphQL/Mutations/EntityMutationInputTrait.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/modules/contrib/graphql_mutation/src/Plugin/GraphQL/Mutations/EntityMutationInputTrait.php	(date 1526611957000)
+++ web/modules/contrib/graphql_mutation/src/Plugin/GraphQL/Mutations/EntityMutationInputTrait.php	(date 1526832101000)
@@ -2,12 +2,12 @@
 
 namespace Drupal\graphql_mutation\Plugin\GraphQL\Mutations;
 
-use Drupal\graphql\GraphQL\Schema\Schema;
-use Drupal\graphql\GraphQL\Type\InputObjectType;
-use Drupal\graphql\Plugin\GraphQL\PluggableSchemaPluginInterface;
-use Youshido\GraphQL\Execution\ResolveInfo;
-use Youshido\GraphQL\Type\ListType\ListType;
-use Youshido\GraphQL\Type\Scalar\AbstractScalarType;
+use GraphQL\Type\Definition\InputObjectType;
+use Drupal\graphql\GraphQL\Execution\ResolveContext;
+use GraphQL\Type\Definition\ListOfType;
+use GraphQL\Type\Definition\ResolveInfo;
+use GraphQL\Type\Definition\ScalarType;
+use GraphQL\Type\Definition\NonNull;
 
 trait EntityMutationInputTrait {
 
@@ -16,35 +16,54 @@
    *
    * Loops over all input values and assigns them to their original field names.
    *
+   * @param $value
+   *   The parent value.
    * @param array $args
    *   The entity values provided through the resolver args.
-   * @param \Youshido\GraphQL\Execution\ResolveInfo $info
+   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   *   The resolve context.
+   * @param \GraphQL\Type\Definition\ResolveInfo $info
    *   The resolve info object.
    *
    * @return array
    *   The extracted entity values with their proper, internal field names.
    */
-  protected function extractEntityInput(array $args, ResolveInfo $info) {
-    /** @var \Drupal\graphql\GraphQL\Type\InputObjectType $inputType */
-    $inputType = $info->getField()->getArgument('input')->getType()->getNamedType();
-    $fields = $inputType->getPlugin()->getPluginDefinition()['fields'];
+  protected function extractEntityInput($value, array $args, ResolveContext $context, ResolveInfo $info) {
+    /** @var \GraphQL\Type\Definition\ObjectType $defs */
+    $defs = $info->parentType;
+    $inputType = $info->parentType;
 
+    /** @var \GraphQL\Type\Definition\FieldDefinition $fields */
+    $fields = $defs->getField($info->fieldName);
     return array_reduce(array_keys($args['input']), function($carry, $current) use ($fields, $args, $info, $inputType) {
-      $nullableType = $inputType->getField($current)->getType()->getNullableType();
-      $isMulti = $nullableType instanceof ListType;
-      $fieldName = $fields[$current]['field_name'];
+      /** @var \GraphQL\Type\Definition\InputObjectField $inputObject */
+      $inputObject = $fields->getArg('input')->getType()->getWrappedType()->getField($current);
+
+      /** @var \GraphQL\Type\Definition\NonNull $nullableType */
+      $nullableType = $inputObject->getType();
+
+      /** @var \GraphQL\Type\Definition\NonNull $fieldType */
+      if ($nullableType instanceof NonNull) {
+        $fieldType = $nullableType->getWrappedType();
+      }
+      else {
+        $fieldType = $nullableType;
+      }
+
+      $fieldName = $inputObject->name;
+      $actualFieldName = $this->fromCamelCase($fieldName);
       $fieldValue = $args['input'][$current];
 
-      /** @var \Drupal\graphql\GraphQL\Type\InputObjectType $namedType */
-      $namedType = $nullableType->getNamedType();
-      if ($namedType instanceof AbstractScalarType) {
-        return $carry + [$fieldName => $fieldValue];
-      }
-
-      if ($namedType instanceof InputObjectType) {
-        $fieldValue = $isMulti ? array_map(function($value) use ($namedType, $info) {
-          return $this->extractEntityFieldInput($value, $namedType, $info);
-        }, $fieldValue) : $this->extractEntityFieldInput($fieldValue, $namedType, $info);
+      /** @var \GraphQL\Type\Definition\InputObjectType $namedType */
+      if ($fieldType instanceof ScalarType) {
+        return $carry + [$actualFieldName => $fieldValue];
+      }
+
+      if ($fieldType instanceof InputObjectType) {
+        $isMulti = $nullableType instanceof ListOfType;
+        $fieldValue = $isMulti ? array_map(function($value) use ($fieldType, $info) {
+          return $this->extractEntityFieldInput($value, $fieldType, $info);
+        }, $fieldValue) : $this->extractEntityFieldInput($fieldValue, $fieldType, $info);
 
         return $carry + [$fieldName => $fieldValue];
       }
@@ -61,22 +80,40 @@
    *
    * @param array $fieldValue
    *   The field values keyed by property name.
-   * @param \Drupal\graphql\GraphQL\Type\InputObjectType $fieldType
+   * @param \GraphQL\Type\Definition\InputObjectType $fieldType
    *   The field type.
-   * @param \Youshido\GraphQL\Execution\ResolveInfo $info
+   * @param \GraphQL\Type\Definition\ResolveInfo $info
    *   The resolve info object.
    *
    * @return array
    *   The extracted field values with their proper, internal property names.
    */
-  protected function extractEntityFieldInput(array $fieldValue, InputObjectType $fieldType, ResolveInfo $info) {
-    $properties = $fieldType->getPlugin()->getPluginDefinition()['fields'];
+  protected function extractEntityFieldInput(array $fieldValue, \GraphQL\Type\Definition\InputObjectType $fieldType, ResolveInfo $info) {
+    $properties = $fieldType->getFields();
     return array_reduce(array_keys($fieldValue), function($carry, $current) use ($properties, $fieldValue) {
-      $key = $properties[$current]['property_name'];
+      $key = $properties[$current]->name;
       $value = $fieldValue[$current];
 
       return $carry + [$key => $value];
     }, []);
   }
 
-}
\ No newline at end of file
+  /**
+   * Convert camel cased strings to underscores.
+   *
+   * @param string $input
+   *   The string to convert.
+   * @return string
+   *   The converted string.
+   */
+  protected function fromCamelCase(string $input) {
+    preg_match_all('!([A-Z][A-Z0-9]*(?=$|[A-Z][a-z0-9])|[A-Za-z][a-z0-9]+)!', $input, $matches);
+    $ret = $matches[0];
+    foreach ($ret as &$match) {
+      $match = $match == strtoupper($match) ? strtolower($match) : lcfirst($match);
+    }
+
+    return implode('_', $ret);
+  }
+
+}
